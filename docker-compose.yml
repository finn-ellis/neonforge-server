# docker-compose.yml
services:
  # Python Backend Service
  backend:
    build:
      context: MainServer
      dockerfile: ../backend.Dockerfile
    network_mode: host # Use host network for mDNS broadcasting
    volumes:
      - ./MainServer:/app # Mounts the MainServer code into the container for easy development
    environment:
      # Comma-separated list of allowed browser origins for both extensions
      FILESERVER_CORS_ORIGINS: http://localhost:8080,http://127.0.0.1:8080
      KIOSK_QUEUE_CORS_ORIGINS: http://localhost:8081,http://127.0.0.1:8081
      # Set to true only if you need cookies / auth headers
      FILESERVER_CORS_SUPPORTS_CREDENTIALS: false
      KIOSK_QUEUE_CORS_SUPPORTS_CREDENTIALS: false

  # FileServer Frontend Service
  fileserver-frontend:
    build:
      context: MainServer
      dockerfile: ../frontend.Dockerfile # Path to the Dockerfile from the context root
      args:
        APP_DIR: FileServer/frontend
        WORK_DIR: /app/fileserver-frontend
        VITE_API_URL: "http://host.docker.internal:80"
    ports:
      - "8080:81" # Expose FileServer frontend on port 8080
    environment:
      - NGINX_PORT=81
      - API_URL="http://host.docker.internal:80"
    depends_on:
      - backend
    # networks:
    #   - app-network

  # KioskQueue Frontend Service
  kiosk-frontend:
    build:
      context: MainServer
      dockerfile: ../frontend.Dockerfile # Path to the Dockerfile from the context root
      args:
        APP_DIR: KioskQueue/frontend
        WORK_DIR: /app/kiosk-frontend
        VITE_API_URL: "http://host.docker.internal:80"
    ports:
      - "8081:81" # Expose KioskQueue frontend on port 8081
    environment:
      - NGINX_PORT=81
      - API_URL="http://host.docker.internal:80"
    depends_on:
      - backend
    # networks:
    #   - app-network

networks:
  app-network:
    driver: bridge